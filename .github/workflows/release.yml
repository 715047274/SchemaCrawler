name: Create Release

on:
  push: # DEBUG - Temporarily turn on for each push
  create:
    tags:
      - 'v*'

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:

# SETUP BUILD ENVIRONMENT
    - id: checkout-code
      name: Checkout code
      uses: actions/checkout@v1
    - id: setup-jdk
      name: Setup JDK
      uses: actions/setup-java@v1
      with:
        java-version: 8
        server-id: sonatype-nexus
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
    - id: install-packages
      name: Install packages
      run: |
        sudo apt-get -qq update
        sudo apt-get install graphviz
    - id: install-secret-key
      name: Install secret key
      env:
        OSSRH_GPG_SECRET_KEY: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
      run: |
        echo $OSSRH_GPG_SECRET_KEY | gpg --import
        gpg --list-secret-keys --keyid-format LONG
    - id: prepare-tag
      name: Prepare Tag
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_NAME="${GITHUB_REF##refs/tags/}"
        echo "::set-output name=tag_name::${TAG_NAME}"
        echo "::set-output name=deploy_tag_name::deploy-${TAG_NAME}"
    - id: show-environment
      name: Show environment
      run: |
        echo github.repository: ${{ github.repository }}
        echo github.ref: ${{ github.head_ref || github.ref }}
        echo github.sha: ${{ github.sha }}
        mvn -v
        cat ~/.m2/settings.xml

# BUILD FOR DISTRIBUTION
    - id: build
      name: Build
      env:
        TZ: GMT
      run: |
        mvn \
          --no-transfer-progress \
          --batch-mode \
          -Ddistrib \
          clean install

# CREATE GITHUB RELEASE AND ADD ASSETS
    - id: create-release
      name: Create GitHub release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: DEBUG Release ${{ github.ref }}
        body: |
          'SchemaCrawler ${{ steps.prepare-tag.outputs.tag_name }}'
        draft: false
        prerelease: false
    - id: upload-release-zip
      name: Upload SchemaCrawler distribution zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./schemacrawler-distrib/target/schemacrawler-16.6.1-distribution.zip
        asset_name: schemacrawler-16.6.1-distribution.zip
        asset_content_type: application/zip
    - id: upload-release-sha
      name: Upload SchemaCrawler distribution zip SHA
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./schemacrawler-distrib/target/schemacrawler-16.6.1-distribution.zip.SHA-512
        asset_name: schemacrawler-16.6.1-distribution.zip.SHA-512
        asset_content_type: text/plain

# PUBLISH WEBSITE TO GITHUB PAGES
    - id: pubish-website
      name: Publish website to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./schemacrawler-distrib/target/_website
        force_orphan: true
        user_name: 'Sualeh Fatehi'
        user_email: 'sualeh@hotmail.com'
        commit_message: 'SchemaCrawler Website ${{ steps.prepare-tag.outputs.tag_name }}'

# CREATE AND PUBLISH DOCKER IMAGE
    - id: create-docker-image
      name: Create and publish Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        bash -c "cd schemacrawler-docker/; ./docker-build.sh"

# PUBLISH TO CENTRAL REPOSITORY
    - id: publish-to-central
      name: Publish to Central Repository
      if: false # TODO: Sign artifacts
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      run: |
        mvn \
          --no-transfer-progress \
          --batch-mode \
          -Ddistrib \
          -Dmaven.javadoc.skip=false \
          -Dskip.signing.artifacts=false \
          clean install
